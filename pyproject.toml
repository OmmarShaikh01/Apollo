[tool.poetry]
name = "Apollo"
version = "0.1.0"
description = ""
authors = ["Ommar Shaikh"]
license = "GPL-3.0-only"
readme = "readme.md"
build = 'build.py'
packages = [
    { include = "apollo" },
    { include = "configs" },
]
include = ["apollo/assets/app_themes"]
exclude = [
    'configs\default_testing_settings.toml',
    'configs\default_qt_testing_settings.toml',
    'configs\settings.toml',
    'configs\testing_settings.toml',
    'configs\qt_testing_settings.toml',
    'configs\settings.local.toml',
    'configs\testing_settings.local.toml',
    'configs\qt_testing_settings.local.toml',
    'apollo\assets\app_themes\__loaded_theme__',
    'apollo\layout\*.ui',
    'apollo\db\*.db'
]

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
PySide6 = "^6.3.0"
mutagen = "^1.45.1"
av = "^9.2.0"
dynaconf = "^3.1.8"
pyo = "^1.0.4"
numpy = "^1.22.4"
requests = "^2.27.1"

[tool.poetry.dev-dependencies]
Sphinx = "^4.5.0"
sphinx-rtd-theme = "^1.0.0"
autoclasstoc = "^1.5.1"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-cases = "^3.6.12"
pytest-mock = "^3.7.0"
nox = "^2022.1.7"
Jinja2 = "^3.1.2"
pytest-qt = "^4.0.2"
memory-profiler = "^0.60.0"
black = "^22.6.0"
pylint = "^2.14.4"
pytest-sugar = "^0.9.4"
isort = "^5.10.1"

[tool.pytest.ini_options]
testpaths = [
    "tests/pytest_apollo",
    "tests/pytest_qt_apollo"
]
addopts = [
    "--capture=sys",
    "--cache-clear",
    "--color=yes",
    "--code-highlight=yes",
    "--disable-warnings",
    "--last-failed",
    "--no-header",
    "--durations=10",
]
filterwarnings = ["ignore::DeprecationWarning"]
console_output_style = "progress"
cache_dir=".pytest_cache"
qt_api="pyside6"

[tool.isort]
py_version=39
profile="black"
line_length="100"
known_first_party = ["apollo", "configs", "tests"]
atomic=true
lines_after_imports=2
ignore_comments=true
virtual_env='.\venv'
remove_redundant_aliases=true
color_output=true
supported_extensions=["py"]

[tool.black]
--check = "no"
diff = "no"
color = true
line-length = 100
target-version = ["py39"]
exclude='''
/(
\.direnv|
\.eggs|
\.git|
\.hg|
\.mypy_cache|
\.nox|
\.tox|
\.venv|
venv|
\.svn|
_build|
buck-out|
build|
dist|
__pypackages__|
\.pyi
)/
'''
include='\.py?$'

[tool.pylint.main]
extension-pkg-allow-list = ['PySide6', 'av']
fail-under = 1000
ignore = ["CVS", ".github", ".scripts", "docs", "examples", ".nox", ".venv", ".pytest_cache"]
ignore-paths = '''
/(
\.direnv|
\.eggs|
\.git|
\.hg|
\.mypy_cache|
\.nox|
\.tox|
\.venv|
venv|
\.svn|
_build|
buck-out|
build|
dist|
__pypackages__|
\.pyi
)/
'''
ignore-patterns = ['mainwindow\\.py']
jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.9"
recursive = true
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z][a-z]+"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100

[tool.pylint.imports]
allow-wildcard-with-all = false
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "new"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "bare-except", "invalid-name"]
enable = ["c-extension-no-member"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
output-format = "text:./tests/linter_output.txt,colorized"
reports = true
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb", "call"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
